Open PicoBlaze Assembler log for program "uart_kcpsm3.psm"
Generated by opbasm v1.3
  Assembled on 2019-07-24T01:15:16
  PicoBlaze-3 mode

  Last occupied address: 073 hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 116
  Memory locations available: 908
  Scratchpad size: 64


Assembly listing
----------------
000                             ;Declare necessary constants used

000                             ;   KCPSM3-USER
000                             CONSTANT UART_status_port_user, 01
000                             CONSTANT UART_read_port_user, 02
000                             CONSTANT UART_write_port_user, 01
000                             CONSTANT tx_half_full_user, 01
000                             CONSTANT tx_full_user, 02
000                             CONSTANT rx_half_full_user, 04
000                             CONSTANT rx_full_user, 08
000                             CONSTANT rx_data_present_user, 10

000                             ;   PWM_GAUGE-KCPSM3
000                             CONSTANT UART_status_port_pwm_gauge, 04
000                             CONSTANT UART_read_port_pwm_gauge, 08
000                             CONSTANT rx_half_full_pwm_gauge, 01
000                             CONSTANT rx_full_pwm_gauge, 02
000                             CONSTANT rx_data_present_pwm_gauge, 04

000                             ;   KCPSM3-SSEG
000                             CONSTANT UART_status_port_sseg, 10
000                             CONSTANT UART_write_port_sseg, 02
000                             CONSTANT tx_half_full_sseg, 01
000                             CONSTANT tx_full_sseg, 02

000                             ;   KCPSM3-LED
000                             CONSTANT UART_status_port_led, 20
000                             CONSTANT UART_write_port_led, 04
000                             CONSTANT tx_half_full_led, 01
000                             CONSTANT tx_full_led, 02

000                             NAMEREG sf, UART_data_user     ;used to pass data to and from the UART
000                             NAMEREG se, UART_data_led
000                             NAMEREG sd, UART_data_sseg
000                             NAMEREG sc, UART_data_pwm_gauge

000                             NAMEREG sb, store_pointer      ;used to pass location of data in scratch pad memory

000                             NAMEREG sa, dividend           ; preserved
000                             NAMEREG s9, divisor            ; preserved
000                             NAMEREG s8, quotient           ; preserved
000                             NAMEREG s7, remainder          ; modified
000                             NAMEREG s6, bit_mask           ; used to test bits in dividend

000                             NAMEREG s5, multiplicand
000                             NAMEREG s4, multiplier
000                             NAMEREG s3, bit_mask
000                             NAMEREG s2, result_msb
000                             NAMEREG s1, result_lsb

000                             ;ASCII table

000                             CONSTANT character_a, 61
000                             CONSTANT character_b, 62
000                             CONSTANT character_c, 63
000                             CONSTANT character_d, 64
000                             CONSTANT character_e, 65
000                             CONSTANT character_f, 66
000                             CONSTANT character_g, 67
000                             CONSTANT character_h, 68
000                             CONSTANT character_i, 69
000                             CONSTANT character_j, 6A
000                             CONSTANT character_k, 6B
000                             CONSTANT character_l, 6C
000                             CONSTANT character_m, 6D
000                             CONSTANT character_n, 6E
000                             CONSTANT character_o, 6F
000                             CONSTANT character_p, 70
000                             CONSTANT character_q, 71
000                             CONSTANT character_r, 72
000                             CONSTANT character_s, 73
000                             CONSTANT character_t, 74
000                             CONSTANT character_u, 75
000                             CONSTANT character_v, 76
000                             CONSTANT character_w, 77
000                             CONSTANT character_x, 78
000                             CONSTANT character_y, 79
000                             CONSTANT character_z, 7A
000                             CONSTANT character_A, 41
000                             CONSTANT character_B, 42
000                             CONSTANT character_C, 43
000                             CONSTANT character_D, 44
000                             CONSTANT character_E, 45
000                             CONSTANT character_F, 46
000                             CONSTANT character_G, 47
000                             CONSTANT character_H, 48
000                             CONSTANT character_I, 49
000                             CONSTANT character_J, 4A
000                             CONSTANT character_K, 4B
000                             CONSTANT character_L, 4C
000                             CONSTANT character_M, 4D
000                             CONSTANT character_N, 4E
000                             CONSTANT character_O, 4F
000                             CONSTANT character_P, 50
000                             CONSTANT character_Q, 51
000                             CONSTANT character_R, 52
000                             CONSTANT character_S, 53
000                             CONSTANT character_T, 54
000                             CONSTANT character_U, 55
000                             CONSTANT character_V, 56
000                             CONSTANT character_W, 57
000                             CONSTANT character_X, 58
000                             CONSTANT character_Y, 59
000                             CONSTANT character_Z, 5A
000                             CONSTANT character_0, 30
000                             CONSTANT character_1, 31
000                             CONSTANT character_2, 32
000                             CONSTANT character_3, 33
000                             CONSTANT character_4, 34
000                             CONSTANT character_5, 35
000                             CONSTANT character_6, 36
000                             CONSTANT character_7, 37
000                             CONSTANT character_8, 38
000                             CONSTANT character_9, 39
000                             CONSTANT character_colon, 3A
000                             CONSTANT character_semi_colon, 3B
000                             CONSTANT character_less_than, 3C
000                             CONSTANT character_greater_than, 3E
000                             CONSTANT character_equals, 3D
000                             CONSTANT character_space, 20
000                             CONSTANT character_CR, 0D      ;carriage return
000                             CONSTANT character_question, 3F ;'?'
000                             CONSTANT character_dollar, 24
000                             CONSTANT character_BS, 08      ;Back Space command character


000                 initialize:
000  3C000                      DISABLE INTERRUPT
001                             ;   Program loop
001  00EFF                      LOAD UART_data_led, FF
002  3004B                      CALL send_to_UART_led
003  00EFF                      LOAD UART_data_led, FF
004  3004B                      CALL send_to_UART_led
005  00E40                      LOAD UART_data_led, 40
006  3004B                      CALL send_to_UART_led
007               program_loop:
007                             ;CALL read_from_UART_user
007                             ;CALL send_to_UART_user
007                             ;JUMP program_loop
007                             ;TEST UART_data_user, character_l
007                             ;JUMP NZ, handle_led
007                             ;TEST UART_data_user, character_n
007                             ;JUMP NZ, send_pwm_value_to_sseg
007                             ;JUMP program_loop
007                 handle_led:
007                             ;CALL receive_led_number
007                             ;CALL send_to_UART_led
007                             ;JUMP program_loop
007        send_pwm_value_to_sseg:
007  30057                      CALL read_from_UART_pwm
008  3002F                      CALL send_to_sseg
009  34007                      JUMP program_loop

00A         receive_led_number:
00A  00E00                      LOAD UART_data_led, 00

00B  30018                      CALL receive_digit
00C  015F0                      LOAD multiplicand, UART_data_user
00D  00464                      LOAD multiplier, 64
00E  3005D                      CALL multiply
00F  19E10                      ADD UART_data_led, result_lsb

010  30018                      CALL receive_digit
011  015F0                      LOAD multiplicand, UART_data_user
012  0040A                      LOAD multiplier, 0A
013  3005D                      CALL multiply
014  19E10                      ADD UART_data_led, result_lsb

015  30018                      CALL receive_digit
016  19E10                      ADD UART_data_led, result_lsb
017  2A000                      RETURN

018              receive_digit:
018  30051                      CALL read_from_UART_user
019  3003F                      CALL send_to_UART_user
01A  12F00                      TEST UART_data_user, 00
01B  35007                      JUMP Z, program_loop
01C  12F01                      TEST UART_data_user, 01
01D  35007                      JUMP Z, program_loop
01E  12F02                      TEST UART_data_user, 02
01F  35007                      JUMP Z, program_loop
020  12F03                      TEST UART_data_user, 03
021  35007                      JUMP Z, program_loop
022  12F04                      TEST UART_data_user, 04
023  35007                      JUMP Z, program_loop
024  12F05                      TEST UART_data_user, 05
025  35007                      JUMP Z, program_loop
026  12F06                      TEST UART_data_user, 06
027  35007                      JUMP Z, program_loop
028  12F07                      TEST UART_data_user, 07
029  35007                      JUMP Z, program_loop
02A  12F08                      TEST UART_data_user, 08
02B  35007                      JUMP Z, program_loop
02C  12F09                      TEST UART_data_user, 09
02D  35007                      JUMP Z, program_loop
02E  2A000                      RETURN


02F               send_to_sseg:
02F  01AC0                      LOAD dividend, UART_data_pwm_gauge
030  00964                      LOAD divisor, 64
031  30068                      CALL divide
032  01D80                      LOAD UART_data_sseg, quotient
033  30045                      CALL send_to_UART_sseg

034  01A70                      LOAD dividend, remainder
035  0090A                      LOAD divisor, 0A
036  30068                      CALL divide
037  01D80                      LOAD UART_data_sseg, quotient
038  30045                      CALL send_to_UART_sseg

039  01A70                      LOAD dividend, remainder
03A  00901                      LOAD divisor, 01
03B  30068                      CALL divide
03C  01D80                      LOAD UART_data_sseg, quotient
03D  30045                      CALL send_to_UART_sseg

03E  2A000                      RETURN

03F          send_to_UART_user:
03F  04001                      INPUT s0, UART_status_port_user
040  12002                      TEST s0, tx_full_user
041  35043                      JUMP Z, UART_write_user
042  3403F                      JUMP send_to_UART_user
043            UART_write_user:
043  2CF01                      OUTPUT UART_data_user, UART_write_port_user
044  2A000                      RETURN

045          send_to_UART_sseg:
045  04010                      INPUT s0, UART_status_port_sseg
046  12002                      TEST s0, tx_full_sseg
047  35049                      JUMP Z, UART_write_sseg
048  34045                      JUMP send_to_UART_sseg
049            UART_write_sseg:
049  2CD02                      OUTPUT UART_data_sseg, UART_write_port_sseg
04A  2A000                      RETURN


04B           send_to_UART_led:
04B  04020                      INPUT s0, UART_status_port_led
04C  12002                      TEST s0, tx_full_led
04D  3504F                      JUMP Z, UART_write_led
04E  3404B                      JUMP send_to_UART_led
04F             UART_write_led:
04F  2CE04                      OUTPUT UART_data_led, UART_write_port_led
050  2A000                      RETURN


051        read_from_UART_user:
051  04001                      INPUT s0, UART_status_port_user
052  12010                      TEST s0, rx_data_present_user
053  35455                      JUMP NZ, read_number
054  34051                      JUMP read_from_UART_user
055                read_number:
055  04F02                      INPUT UART_data_user, UART_read_port_user
056  2A000                      RETURN

057         read_from_UART_pwm:
057  04004                      INPUT s0, UART_status_port_pwm_gauge
058  12004                      TEST s0, rx_data_present_pwm_gauge
059  3545B                      JUMP NZ, read_pwm_number
05A  34057                      JUMP read_from_UART_pwm
05B            read_pwm_number:
05B  04C08                      INPUT UART_data_pwm_gauge, UART_read_port_pwm_gauge
05C  2A000                      RETURN


05D                   multiply:
05D  00301                      LOAD bit_mask, 01
05E  00200                      LOAD result_msb, 00
05F  00100                      LOAD result_lsb, 00
060                  mult_loop:
060  13430                      TEST multiplier, bit_mask
061  35063                      JUMP Z, no_add
062  19250                      ADD result_msb, multiplicand
063                     no_add:
063  20208                      SRA result_msb
064  20108                      SRA result_lsb
065  20306                      SL0 bit_mask                   ; shift bit_mask left to examine
066  35460                      JUMP NZ, mult_loop
067  2A000                      RETURN



068                     divide:
068  00700                      LOAD remainder, 00
069  00380                      LOAD bit_mask, 80
06A              division_loop:
06A  13A30                      TEST dividend, bit_mask
06B  20700                      SLA remainder
06C  20806                      SL0 quotient
06D  15790                      COMPARE remainder, divisor
06E  35871                      JUMP C, no_sub
06F  1D790                      SUB remainder, divisor
070  18801                      ADD quotient, 01
071                     no_sub:
071  2030E                      SR0 bit_mask
072  3546A                      JUMP NZ, division_loop
073  2A000                      RETURN



All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/paul/Documents/Laboratory_reports/PUR/PUR_Project/PUR_Project/Software/uart_kcpsm3.psm


List of defined constants
-------------------------
    CONSTANT name               Value  Source PSM file
 ----------------               -----  ---------------
    BEL                         07
    BS                          08
    CR                          0D
    DCS                         90
    DEL                         7F
    ESC                         1B
    HT                          09
    LF                          0A
    NUL                         00
    ST                          9C
    UART_read_port_pwm_gauge    08     uart_kcpsm3.psm
    UART_read_port_user         02     uart_kcpsm3.psm
    UART_status_port_led        20     uart_kcpsm3.psm
    UART_status_port_pwm_gauge  04     uart_kcpsm3.psm
    UART_status_port_sseg       10     uart_kcpsm3.psm
    UART_status_port_user       01     uart_kcpsm3.psm
    UART_write_port_led         04     uart_kcpsm3.psm
    UART_write_port_sseg        02     uart_kcpsm3.psm
    UART_write_port_user        01     uart_kcpsm3.psm
    VT                          0B
 *  character_0                 30     uart_kcpsm3.psm
 *  character_1                 31     uart_kcpsm3.psm
 *  character_2                 32     uart_kcpsm3.psm
 *  character_3                 33     uart_kcpsm3.psm
 *  character_4                 34     uart_kcpsm3.psm
 *  character_5                 35     uart_kcpsm3.psm
 *  character_6                 36     uart_kcpsm3.psm
 *  character_7                 37     uart_kcpsm3.psm
 *  character_8                 38     uart_kcpsm3.psm
 *  character_9                 39     uart_kcpsm3.psm
 *  character_A                 41     uart_kcpsm3.psm
 *  character_B                 42     uart_kcpsm3.psm
 *  character_BS                08     uart_kcpsm3.psm
 *  character_C                 43     uart_kcpsm3.psm
 *  character_CR                0D     uart_kcpsm3.psm
 *  character_D                 44     uart_kcpsm3.psm
 *  character_E                 45     uart_kcpsm3.psm
 *  character_F                 46     uart_kcpsm3.psm
 *  character_G                 47     uart_kcpsm3.psm
 *  character_H                 48     uart_kcpsm3.psm
 *  character_I                 49     uart_kcpsm3.psm
 *  character_J                 4A     uart_kcpsm3.psm
 *  character_K                 4B     uart_kcpsm3.psm
 *  character_L                 4C     uart_kcpsm3.psm
 *  character_M                 4D     uart_kcpsm3.psm
 *  character_N                 4E     uart_kcpsm3.psm
 *  character_O                 4F     uart_kcpsm3.psm
 *  character_P                 50     uart_kcpsm3.psm
 *  character_Q                 51     uart_kcpsm3.psm
 *  character_R                 52     uart_kcpsm3.psm
 *  character_S                 53     uart_kcpsm3.psm
 *  character_T                 54     uart_kcpsm3.psm
 *  character_U                 55     uart_kcpsm3.psm
 *  character_V                 56     uart_kcpsm3.psm
 *  character_W                 57     uart_kcpsm3.psm
 *  character_X                 58     uart_kcpsm3.psm
 *  character_Y                 59     uart_kcpsm3.psm
 *  character_Z                 5A     uart_kcpsm3.psm
 *  character_a                 61     uart_kcpsm3.psm
 *  character_b                 62     uart_kcpsm3.psm
 *  character_c                 63     uart_kcpsm3.psm
 *  character_colon             3A     uart_kcpsm3.psm
 *  character_d                 64     uart_kcpsm3.psm
 *  character_dollar            24     uart_kcpsm3.psm
 *  character_e                 65     uart_kcpsm3.psm
 *  character_equals            3D     uart_kcpsm3.psm
 *  character_f                 66     uart_kcpsm3.psm
 *  character_g                 67     uart_kcpsm3.psm
 *  character_greater_than      3E     uart_kcpsm3.psm
 *  character_h                 68     uart_kcpsm3.psm
 *  character_i                 69     uart_kcpsm3.psm
 *  character_j                 6A     uart_kcpsm3.psm
 *  character_k                 6B     uart_kcpsm3.psm
 *  character_l                 6C     uart_kcpsm3.psm
 *  character_less_than         3C     uart_kcpsm3.psm
 *  character_m                 6D     uart_kcpsm3.psm
 *  character_n                 6E     uart_kcpsm3.psm
 *  character_o                 6F     uart_kcpsm3.psm
 *  character_p                 70     uart_kcpsm3.psm
 *  character_q                 71     uart_kcpsm3.psm
 *  character_question          3F     uart_kcpsm3.psm
 *  character_r                 72     uart_kcpsm3.psm
 *  character_s                 73     uart_kcpsm3.psm
 *  character_semi_colon        3B     uart_kcpsm3.psm
 *  character_space             20     uart_kcpsm3.psm
 *  character_t                 74     uart_kcpsm3.psm
 *  character_u                 75     uart_kcpsm3.psm
 *  character_v                 76     uart_kcpsm3.psm
 *  character_w                 77     uart_kcpsm3.psm
 *  character_x                 78     uart_kcpsm3.psm
 *  character_y                 79     uart_kcpsm3.psm
 *  character_z                 7A     uart_kcpsm3.psm
    datestamp_day               18
    datestamp_month             07
    datestamp_year              13
    rx_data_present_pwm_gauge   04     uart_kcpsm3.psm
    rx_data_present_user        10     uart_kcpsm3.psm
 *  rx_full_pwm_gauge           02     uart_kcpsm3.psm
 *  rx_full_user                08     uart_kcpsm3.psm
 *  rx_half_full_pwm_gauge      01     uart_kcpsm3.psm
 *  rx_half_full_user           04     uart_kcpsm3.psm
    timestamp_hours             01
    timestamp_minutes           0F
    timestamp_seconds           10
    tx_full_led                 02     uart_kcpsm3.psm
    tx_full_sseg                02     uart_kcpsm3.psm
    tx_full_user                02     uart_kcpsm3.psm
 *  tx_half_full_led            01     uart_kcpsm3.psm
 *  tx_half_full_sseg           01     uart_kcpsm3.psm
 *  tx_half_full_user           01     uart_kcpsm3.psm

       * Unreferenced constant(s)


  No tables defined


List of text strings
--------------------
    STRING name  Value          Source PSM file
 --------------  -----          ---------------
    datestamp$   "24 Jul 2019"
    timestamp$   "01:15:16"


List of line labels
-------------------
    Label                   Addr  Source PSM file
 --------                   ----  ---------------
    UART_write_led          04F   uart_kcpsm3.psm
    UART_write_sseg         049   uart_kcpsm3.psm
    UART_write_user         043   uart_kcpsm3.psm
    divide                  068   uart_kcpsm3.psm
    division_loop           06A   uart_kcpsm3.psm
 *  handle_led              007   uart_kcpsm3.psm
 *  initialize              000   uart_kcpsm3.psm
    mult_loop               060   uart_kcpsm3.psm
    multiply                05D   uart_kcpsm3.psm
    no_add                  063   uart_kcpsm3.psm
    no_sub                  071   uart_kcpsm3.psm
    program_loop            007   uart_kcpsm3.psm
    read_from_UART_pwm      057   uart_kcpsm3.psm
    read_from_UART_user     051   uart_kcpsm3.psm
    read_number             055   uart_kcpsm3.psm
    read_pwm_number         05B   uart_kcpsm3.psm
    receive_digit           018   uart_kcpsm3.psm
 *  receive_led_number      00A   uart_kcpsm3.psm
 *  send_pwm_value_to_sseg  007   uart_kcpsm3.psm
    send_to_UART_led        04B   uart_kcpsm3.psm
    send_to_UART_sseg       045   uart_kcpsm3.psm
    send_to_UART_user       03F   uart_kcpsm3.psm
    send_to_sseg            02F   uart_kcpsm3.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          5
   ADDCY        -
   AND          -
   CALL         18
   COMPARE      1
   DISABLE      1
   ENABLE       -
   FETCH        -
   INPUT        7
   JUMP         25
   LOAD         22
   OR           -
   OUTPUT       3
   RETURN       10
   RETURNI      -
   RL           -
   RR           -
   SL0          2
   SL1          -
   SLA          1
   SLX          -
   SR0          1
   SR1          -
   SRA          2
   SRX          -
   STORE        -
   SUB          1
   SUBCY        -
   TEST         17
   XOR          -
