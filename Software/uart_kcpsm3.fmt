                      ;Declare necessary constants used

                      ;   KCPSM3-USER
                      CONSTANT UART_status_port_user, 01
                      CONSTANT UART_read_port_user, 02
                      CONSTANT UART_write_port_user, 01
                      CONSTANT tx_half_full_user, 01
                      CONSTANT tx_full_user, 02
                      CONSTANT rx_half_full_user, 04
                      CONSTANT rx_full_user, 08
                      CONSTANT rx_data_present_user, 10

                      ;   PWM_GAUGE-KCPSM3
                      CONSTANT UART_status_port_pwm_gauge, 04
                      CONSTANT UART_read_port_pwm_gauge, 08
                      CONSTANT rx_half_full_pwm_gauge, 01
                      CONSTANT rx_full_pwm_gauge, 02
                      CONSTANT rx_data_present_pwm_gauge, 04

                      ;   KCPSM3-SSEG
                      CONSTANT UART_status_port_sseg, 10
                      CONSTANT UART_write_port_sseg, 02
                      CONSTANT tx_half_full_sseg, 01
                      CONSTANT tx_full_sseg, 02

                      ;   KCPSM3-LED
                      CONSTANT UART_status_port_led, 20
                      CONSTANT UART_write_port_led, 04
                      CONSTANT tx_half_full_led, 01
                      CONSTANT tx_full_led, 02

                      NAMEREG sf, UART_data_user     ;used to pass data to and from the UART
                      NAMEREG se, UART_data_led
                      NAMEREG sd, UART_data_sseg
                      NAMEREG sc, UART_data_pwm_gauge

                      NAMEREG sb, store_pointer      ;used to pass location of data in scratch pad memory

                      NAMEREG sa, dividend           ; preserved
                      NAMEREG s9, divisor            ; preserved
                      NAMEREG s8, quotient           ; preserved
                      NAMEREG s7, remainder          ; modified
                      NAMEREG s6, bit_mask           ; used to test bits in dividend

                      NAMEREG s5, multiplicand
                      NAMEREG s4, multiplier
                      NAMEREG s3, bit_mask
                      NAMEREG s2, result_msb
                      NAMEREG s1, result_lsb

                      ;ASCII table

                      CONSTANT character_a, 61
                      CONSTANT character_b, 62
                      CONSTANT character_c, 63
                      CONSTANT character_d, 64
                      CONSTANT character_e, 65
                      CONSTANT character_f, 66
                      CONSTANT character_g, 67
                      CONSTANT character_h, 68
                      CONSTANT character_i, 69
                      CONSTANT character_j, 6A
                      CONSTANT character_k, 6B
                      CONSTANT character_l, 6C
                      CONSTANT character_m, 6D
                      CONSTANT character_n, 6E
                      CONSTANT character_o, 6F
                      CONSTANT character_p, 70
                      CONSTANT character_q, 71
                      CONSTANT character_r, 72
                      CONSTANT character_s, 73
                      CONSTANT character_t, 74
                      CONSTANT character_u, 75
                      CONSTANT character_v, 76
                      CONSTANT character_w, 77
                      CONSTANT character_x, 78
                      CONSTANT character_y, 79
                      CONSTANT character_z, 7A
                      CONSTANT character_A, 41
                      CONSTANT character_B, 42
                      CONSTANT character_C, 43
                      CONSTANT character_D, 44
                      CONSTANT character_E, 45
                      CONSTANT character_F, 46
                      CONSTANT character_G, 47
                      CONSTANT character_H, 48
                      CONSTANT character_I, 49
                      CONSTANT character_J, 4A
                      CONSTANT character_K, 4B
                      CONSTANT character_L, 4C
                      CONSTANT character_M, 4D
                      CONSTANT character_N, 4E
                      CONSTANT character_O, 4F
                      CONSTANT character_P, 50
                      CONSTANT character_Q, 51
                      CONSTANT character_R, 52
                      CONSTANT character_S, 53
                      CONSTANT character_T, 54
                      CONSTANT character_U, 55
                      CONSTANT character_V, 56
                      CONSTANT character_W, 57
                      CONSTANT character_X, 58
                      CONSTANT character_Y, 59
                      CONSTANT character_Z, 5A
                      CONSTANT character_0, 30
                      CONSTANT character_1, 31
                      CONSTANT character_2, 32
                      CONSTANT character_3, 33
                      CONSTANT character_4, 34
                      CONSTANT character_5, 35
                      CONSTANT character_6, 36
                      CONSTANT character_7, 37
                      CONSTANT character_8, 38
                      CONSTANT character_9, 39
                      CONSTANT character_colon, 3A
                      CONSTANT character_semi_colon, 3B
                      CONSTANT character_less_than, 3C
                      CONSTANT character_greater_than, 3E
                      CONSTANT character_equals, 3D
                      CONSTANT character_space, 20
                      CONSTANT character_CR, 0D      ;carriage return
                      CONSTANT character_question, 3F ;'?'
                      CONSTANT character_dollar, 24
                      CONSTANT character_BS, 08      ;Back Space command character


          initialize:
                      DISABLE INTERRUPT
                      ;   Program loop
                      LOAD UART_data_led, FF
                      CALL send_to_UART_led
                      LOAD UART_data_led, FF
                      CALL send_to_UART_led
                      LOAD UART_data_led, 40
                      CALL send_to_UART_led
        program_loop:
                      ;CALL read_from_UART_user
                      ;CALL send_to_UART_user
                      ;JUMP program_loop
                      ;TEST UART_data_user, character_l
                      ;JUMP NZ, handle_led
                      ;TEST UART_data_user, character_n
                      ;JUMP NZ, send_pwm_value_to_sseg
                      ;JUMP program_loop
          handle_led:
                      ;CALL receive_led_number
                      ;CALL send_to_UART_led
                      ;JUMP program_loop
 send_pwm_value_to_sseg:
                      CALL read_from_UART_pwm
                      CALL send_to_sseg
                      JUMP program_loop

  receive_led_number:
                      LOAD UART_data_led, 00

                      CALL receive_digit
                      LOAD multiplicand, UART_data_user
                      LOAD multiplier, 64
                      CALL multiply
                      ADD UART_data_led, result_lsb

                      CALL receive_digit
                      LOAD multiplicand, UART_data_user
                      LOAD multiplier, 0A
                      CALL multiply
                      ADD UART_data_led, result_lsb

                      CALL receive_digit
                      ADD UART_data_led, result_lsb
                      RETURN

       receive_digit:
                      CALL read_from_UART_user
                      CALL send_to_UART_user
                      TEST UART_data_user, 00
                      JUMP Z, program_loop
                      TEST UART_data_user, 01
                      JUMP Z, program_loop
                      TEST UART_data_user, 02
                      JUMP Z, program_loop
                      TEST UART_data_user, 03
                      JUMP Z, program_loop
                      TEST UART_data_user, 04
                      JUMP Z, program_loop
                      TEST UART_data_user, 05
                      JUMP Z, program_loop
                      TEST UART_data_user, 06
                      JUMP Z, program_loop
                      TEST UART_data_user, 07
                      JUMP Z, program_loop
                      TEST UART_data_user, 08
                      JUMP Z, program_loop
                      TEST UART_data_user, 09
                      JUMP Z, program_loop
                      RETURN


        send_to_sseg:
                      LOAD dividend, UART_data_pwm_gauge
                      LOAD divisor, 64
                      CALL divide
                      LOAD UART_data_sseg, quotient
                      CALL send_to_UART_sseg

                      LOAD dividend, remainder
                      LOAD divisor, 0A
                      CALL divide
                      LOAD UART_data_sseg, quotient
                      CALL send_to_UART_sseg

                      LOAD dividend, remainder
                      LOAD divisor, 01
                      CALL divide
                      LOAD UART_data_sseg, quotient
                      CALL send_to_UART_sseg

                      RETURN

   send_to_UART_user:
                      INPUT s0, UART_status_port_user
                      TEST s0, tx_full_user
                      JUMP Z, UART_write_user
                      JUMP send_to_UART_user
     UART_write_user:
                      OUTPUT UART_data_user, UART_write_port_user
                      RETURN

   send_to_UART_sseg:
                      INPUT s0, UART_status_port_sseg
                      TEST s0, tx_full_sseg
                      JUMP Z, UART_write_sseg
                      JUMP send_to_UART_sseg
     UART_write_sseg:
                      OUTPUT UART_data_sseg, UART_write_port_sseg
                      RETURN


    send_to_UART_led:
                      INPUT s0, UART_status_port_led
                      TEST s0, tx_full_led
                      JUMP Z, UART_write_led
                      JUMP send_to_UART_led
      UART_write_led:
                      OUTPUT UART_data_led, UART_write_port_led
                      RETURN


 read_from_UART_user:
                      INPUT s0, UART_status_port_user
                      TEST s0, rx_data_present_user
                      JUMP NZ, read_number
                      JUMP read_from_UART_user
         read_number:
                      INPUT UART_data_user, UART_read_port_user
                      RETURN

  read_from_UART_pwm:
                      INPUT s0, UART_status_port_pwm_gauge
                      TEST s0, rx_data_present_pwm_gauge
                      JUMP NZ, read_pwm_number
                      JUMP read_from_UART_pwm
     read_pwm_number:
                      INPUT UART_data_pwm_gauge, UART_read_port_pwm_gauge
                      RETURN


            multiply:
                      LOAD bit_mask, 01
                      LOAD result_msb, 00
                      LOAD result_lsb, 00
           mult_loop:
                      TEST multiplier, bit_mask
                      JUMP Z, no_add
                      ADD result_msb, multiplicand
              no_add:
                      SRA result_msb
                      SRA result_lsb
                      SL0 bit_mask                   ; shift bit_mask left to examine
                      JUMP NZ, mult_loop
                      RETURN



              divide:
                      LOAD remainder, 00
                      LOAD bit_mask, 80
       division_loop:
                      TEST dividend, bit_mask
                      SLA remainder
                      SL0 quotient
                      COMPARE remainder, divisor
                      JUMP C, no_sub
                      SUB remainder, divisor
                      ADD quotient, 01
              no_sub:
                      SR0 bit_mask
                      JUMP NZ, division_loop
                      RETURN


